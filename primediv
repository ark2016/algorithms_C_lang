/*//==============================================================================================================
Составьте программу primediv.c, вычисляющую наибольший простой делитель некоторого числа x. Число x вводится со 
стандартного потока ввода, причём известно, что -2^31<=x<=2^31.
Программа должна использовать решето Эратосфена для построения массива простых чисел.
*///==============================================================================================================
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#include <malloc.h>


bool check_bit(unsigned long long a, int b) {
    return (a & (1 << b)) != 0;
}

unsigned long long set_bit(unsigned long long a, int b) {
    return a | (1 << b);
}

unsigned long long remove_bit(unsigned long long a, int b) {
    return a & ~(1 << b);
}

void reshetoEratosphena(unsigned long long arr[], int a) {
    arr[0] = remove_bit(arr[0], 0);
    arr[1] = remove_bit(arr[0], 1);
    arr[0] = set_bit(arr[0], 2);
    for (long long i = 4; i < a; i += 2) {
        arr[i / 62] = remove_bit(arr[i / 63], i % 63);
    }
    for (long long i = 3; i < a; i += 2) {
        for (long long j = i + i; j < a; j += i) {
            arr[j / 62] = remove_bit(arr[j / 63], j % 63);
        }
    }
}

long max(long a, long b) {
    return a > b ? a : b;
}

long my_abs(long x) {
    return x < 0 ? -x : x;
}

int main() {

    long int x, a, result = 0;
    scanf("%ld", &x);
    if (LONG_MIN == x) {
        result = 2;
    }
    else {
        x = my_abs(x);
        a = x / 2 / 63 + 2;
//        unsigned long long arr[a]; // <<63
        unsigned long long *arr = (unsigned long long *)malloc((unsigned long long) a * sizeof (unsigned long long));
        for (int i = 0; i < a; ++i)
            arr[i] = -1;// 111....11111

        reshetoEratosphena(arr, a);
        for (long long i = 2; i <= x; ++i) {
            while (0 == x % i) {
                if (check_bit(arr[i / 63], i % 63)) {
                    result = max(i, result);
                    x /= i;
                } else
                    break;
            }
        }
        if (0 == result) result = x;
        free(arr);
    }
    printf("%ld\n", result);
    return 0;
}
